
clc
clear all;
addpath('../picture')
% 匹配测度算法的实现
% wh 2016/11/3

%% 样本
% 1.纯数学测试样本
% x1 = [
%     0,1,0,1,1,0
%     1,1,1,1,1,1
%     0,0,1,1,1,1
%     0,0,1,1,1,1
%     ]';
% x2 = [
%     0,0,1,1,1,0
%     0,0,1,1,1,1
%     0,0,1,1,1,1
%     1,1,0,0,0,0
%     ]';
% % 2.黑白2值图像 灰度图 彩色图 样本
% % 判断分别为 有黑 有白 有灰 有彩 无彩
% x1 = [
%     1,1,0,0,1
%     1,1,0,0,1
%     1,1,0,0,1
%     1,1,1,0,1
%     1,1,1,0,1
%     1,1,1,0,1
%     1,1,1,1,0
%     1,1,1,1,0
%     1,1,1,1,0
%     ]';
% x2 = [
%     1,1,0,0,1
%     1,1,1,0,1
%     1,1,1,1,0
%     1,1,0,0,1
%     1,1,1,0,1
%     1,1,1,1,0
%     1,1,0,0,1
%     1,1,1,0,1
%     1,1,1,1,0
%     ]';
% 
% a = [1,1,1]
% b = [1,1,1]'
% c = a*b


% 3.图片
% 横向分别为该图的rgb的均值
% 纵向为各张图片
x1 = zeros(100,3);
x2 = zeros(100,3);
p_start = 1;
p_num = 20;
for i =1:1:p_num
    pic = imread([num2str(i+p_start-1) '.jpg']);
    [ long, high, d] = size(pic);
    if d>1
        r_m = mean(mean(pic(:,:,1)));
        g_m = mean(mean(pic(:,:,2)));
        b_m = mean(mean(pic(:,:,3)));
        m = (r_m + g_m + b_m)/3;
        r = abs(m - r_m) > 1;
        g = abs(m - g_m) > 1;
        b = abs(m - b_m) > 1;
    else
        r = 0;
        g = 0;
        b = 0;
    end
    for j=1:1:p_num
        x1((i-1)*p_num+j,:) =[r,g,b];
    end
%     x1((((i-1)*10)+1):i*10,:) =[r,g,b];
    for j=1:1:p_num
        x2((i+(j-1)*p_num),:) =[r,g,b];
    end
end
x1 = x1';
x2 = x2';

% x2(100,:)


%% 
[m,n]=size(x1)
[ result ] = get_number( x1,x2 );

%% 显示数据
result1 = num2cell(result);
show = cell(6,(n+1));
show(:,1)= {' ',' Tanimoto测度 ','   Rao测度   ','简单匹配系数','  Dice系数  ','Kulzinsky系数'};
% show(1,:) = {' ','黑黑','黑灰','黑彩','灰黑','灰灰','灰彩','彩黑','彩灰','彩彩'};
show(2:6,2:(n+1)) = result1;
disp(show)


